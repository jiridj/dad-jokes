name: Deploy to wM API Gateway

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      APIGW_URL:
        required: true
      APIGW_USER:
        required: true
      APIGW_PASSWORD:
        required: true
      SPEC_URL: 
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      api-id: ${{ steps.find-api.outputs.api-id }}
      api-name: ${{ steps.compute.outputs.api-name }}
      api-version: ${{ steps.compute.outputs.api-version }} 
      api-is-active: ${{ steps.find-api.outputs.api-is-active }}
    steps:
      - name: Download API spec
        run: curl ${{ secrets.SPEC_URL }} --output openapi.json
      - id: compute
        run: |
          API_NAME=$(jq '.info.title' openapi.json)
          API_VERSION=$(jq '.info.version' openapi.json)
          echo "::set-output name=api-name::${API_NAME}"
          echo "::set-output name=api-version::${API_VERSION}"
      - id: find-api
        uses: jiridj/wm-apigw-actions-find-api@v1
        with:
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-name: ${{ steps.compute.outputs.api-name }}
          api-version: ${{ steps.compute.outputs.api-version }}
          fail-if-not-found: false
          
  create-api:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [prepare]
    if: needs.prepare.outputs.api-id == ''
    steps:
      - id: create-api
        uses: jiridj/wm-apigw-actions-create-api@v1
        if: steps.find-api.outputs.api-id == ''
        with: 
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-spec: 'openapi.json'
          api-spec-type: 'openapi'
      - id: activate-api
        uses: jiridj/wm-apigw-actions-activate-api@v1
        with:
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-id: ${{ steps.find-api.outputs.api-id }}
          set-active: true
          
  update-api:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [prepare]
    if: needs.prepare.outputs.api-id == ''
    steps:
      - id: deactivate-api
        if: needs.prepare.outputs.api-is-active
        uses: jiridj/wm-apigw-actions-activate-api@v1
        with:
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-id: ${{ needs.prepare.outputs.api-id }}
          set-active: false
      - id: update-api
        uses: jiridj/wm-apigw-actions-update-api@v1
        if: steps.find-api.outputs.api-id != ''
        with: 
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-id: ${{ needs.prepare.outputs.api-id }}
          api-spec: 'openapi.json'
          api-spec-type: 'openapi'
      - id: activate-api
        uses: jiridj/wm-apigw-actions-activate-api@v1
        with:
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-id: ${{ needs.prepare.outputs.api-id }}
          set-active: true
        
        