name: Deploy to ECS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      service_name:
        required: true
        type: string
      image_name:
        required: true
        type: string
      image_tag: 
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      APIGW_URL:
        required: true
      APIGW_USER:
        required: true
      APIGW_PASSWORD:
        required: true
      SPEC_URL: 
        required: true
        
jobs:
  deploy-to-ecs:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: echo "doing nothing"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Compute container image with sha
        id: compute-image
        run: | 
          echo "::set-output name=image_with_tag::${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}"
      - name: Download ECS task definition
        run: aws ecs describe-task-definition --task-definition ${{ inputs.service_name }} --query taskDefinition > task-definition.json
      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.service_name }}
          image: ${{ steps.compute-image.outputs.image_with_tag }}
      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service_name }}
          cluster: ${{ inputs.cluster_name }}
          wait-for-service-stability: true

  deploy-to-apigw:
    needs: [deploy-to-ecs]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Download API spec
        run: curl ${{ secrets.SPEC_URL }} --output openapi.json
      - id: compute
        run: |
          API_NAME=$(jq '.info.title' openapi.json | tr -d '"')
          API_VERSION=$(jq '.info.version' openapi.json | tr -d '"')
          echo "::set-output name=api-name::${API_NAME}"
          echo "::set-output name=api-version::${API_VERSION}"
      - id: find-api
        uses: jiridj/wm-apigw-actions-find-api@v1
        with:
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-name: ${{ steps.compute.outputs.api-name }}
          api-version: ${{ steps.compute.outputs.api-version }}
          fail-if-not-found: false
      - id: create-api
        uses: jiridj/wm-apigw-actions-create-api@v1
        if: steps.find-api.outputs.api-id == ''
        with: 
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-spec: 'openapi.json'
          api-spec-type: 'openapi'
          set-active: true
      - id: update-api
        uses: jiridj/wm-apigw-actions-update-api@v1
        if: steps.find-api.outputs.api-id != ''
        with: 
          apigw-url: ${{ secrets.APIGW_URL }}
          apigw-user: ${{ secrets.APIGW_USER }}
          apigw-password: ${{ secrets.APIGW_PASSWORD }}
          api-id: ${{ steps.find-api.outputs.api-id }}
          api-spec: 'openapi.json'
          api-spec-type: 'openapi'
          set-active: true